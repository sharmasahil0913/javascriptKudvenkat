<snippet>
<content><![CDATA[<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>$1</title>
</head>
<body>

	<script>
		try{
			document.write(sayHello());
			document.write("This line will not be executed");
		}
		catch(e){
			document.write("Message =" + e.message + "<br/>");
			document.write("Description =" + e.description + "<br/>");
			document.write("Stack trace =" + e.stack + "<br/>");		
		}
		finally{
			document.write("This line will be executed <br/>");
		}
	</script>

</body>
</html>
</snippet>

<!--
Use try/catch/finally. r
runtime errors are exceptions.
example referencing a variable or method that is not defined.

js statement that can cause exception should be in try block. when it causes exception, control immediately moves to catch block skiping rest of code in the try block.

finally is always executed.
clean/free resources

Catch block cannot catch syntax errors
try{
	alert("Hello";
}
catch(e)
{
	document.write("JS syntax errors cannot be caught in the catch block");
}

JS throw statement:
function divide(){
	var numerator = Number(prompt("Plese enter numerator"));
	var denominator = Number(prompt("Please enter denominator"));

	try{
		if(denominator==0)
		{
			throw{
				error: "Divide by zero error",
				message: "Denom cannot be zero"
			}
		}
		else{
			document.write("Result = " + (numerator/denominator))
		}
	}
	catch (e){
		document.write("Error =" + e.error + "<br/>");
		document.write("Message =" + e.message + "<br/>");
			
	}
}

-->